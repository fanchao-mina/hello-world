#define _CRT_SECURE_NO_WARNINGS 1


#include <stdio.h>
//#include "add.h"
//int main()
//{   
//
//	int a = 10;
//	int b = 20;
//	int sum = Add(a, b);
//	printf("%d\n", sum);
//	return 0;
//}


 
//int main()
//{
//	printf("hehe\n");
//	main();
//	return 0;
//}

 //练习1，接受一个无符号整型值，按照顺序打印他的每一位。例如输入 1234输出 1 2 3 4
//void print(int n)
//{
//	if (n > 9)//n至少为两位数
//	{
//		print(n / 10);
//	}
//	printf("%d ", n % 10);
//}
//int main()
//{
//	unsigned int num = 0;
//	scanf("%d", &num);//123
//	//递归
//	print(num);
//	//print(123)
//	//print(12)3
//	//print(1)2 3
//	return 0;
//}

//练习2 编写函数不允许创建临时变量，求字符串的长度
 

//int my_strlen(char* str)
//{
//	int count = 0;
//	while (*str != 0)
//	{
//		count++;
//		str++;
//	}
//	return count;
//}

//递归的方法
//把大事化小
//my_strlen("bit");
//1+my_strlen("it");
//1+1+my_strlen("t");
//1+1+1+my_strlen("\0");
//1+1+1+0
//3
//int my_strlen(char* str)
//{
//	if (*str != '\0')
//		return 1 + my_strlen(str + 1);
//	else
//		return 0;
//}
//int main()
//{   
//	char arr[] = "bit";
//	//int len = strlen(arr);//求字符串长度
//	//printf("%d\n", len);
//
//    //模拟实现了一个strlen函数
//	int len = my_strlen(arr);//arr是数组，数组传参，传过去的不是整个数组，而是第一个元素的地址
//	printf("len = %d\n", len);
//	return 0;
//}

//n的阶乘
//int Fac1(int n)
//{
//	int i = 0;
//	int ret = 1;
//	for (i = 1; i <= n; i++)
//	{
//		ret *= i;
//	}
//	return ret;
//}   
//int Fac2(int n)
//{
//	if (n <= 1)
//		return 1;
//	else
//		return n*Fac2(n - 1);
//}
//
//
//int main()
//{
//	//求n的阶乘
//	int n = 0;
//	int ret = 0;
//	scanf("%d", &n);
//	/*et = Fac1(n);*/
//	ret = Fac2(n);//循环的方式
//	printf("%d\n", ret);
//	return 0;
//}












////描述第n个斐波那契数
////int count = 0;//全局变量
////int Fib(int n)
////{
////	if (3 == n)//测试第三个斐波那契数的计算次数
////	{
////		count++;
////	}
//// 	if (n <= 2)
////		return 1;
////	else
////		return Fib(n-1) + Fib(n - 2);
////}
////50
////49 48
////48 47 47 46
////47 46 46 45 46 45 45 44...递归效率低
//int Fib(int n)
//{
//	int a = 1;
//	int b = 1;
//	int c = 1;
//	while (n > 2)
//	{
//		c = a + b;
//		a = b;
//		b = c;
//		n--;
//	}
//	return c;
//
//}// 循环的方式，效率高，虽然可能因为内存溢出在输入高的数的时候出现错误
//int main()
//{
//	int n = 0;
//	int reb = 0;
//	scanf("%d", &n);
//	//TDD- 测试驱动开发，先把要求写出来再去实现
//	reb =Fib(n);
//	printf("ret= %d\n", reb);
//	/*printf("count= %d\n", count);*/
//	return 0;
//}




