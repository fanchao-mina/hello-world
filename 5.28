#define _CRT_SECURE_NO_WARNINGS 1
//指针

#include <stdio.h>
//int main()
//{
//	int a = 10;
//	int* p = &a;
//	return 0;
//}

//int main()
//{
//	printf("%d\n", sizeof(char*));
//	printf("%d\n", sizeof(short*));
//	printf("%d\n", sizeof(int*));
//	printf("%d\n", sizeof(double*));
//	return 0;
//}

 

//int main()
//{
//	int a;//局部变量不初始化，默认是随机值
//	int *p;//局部的指针变量，就被初始化随机值
//	*p = 20;
//	return 0;
//}

//int* test()
//{
//	int a = 10;
//	return &a;
//}
//int main()
//{
//	int* p = test();
//	printf("%d\n", *p);
//	return 0;
//}

//int main()
//{
//	int i = 0;
//	int arr[10] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	int* p = arr[0];
//	for (i = 0; i < sz; i++)
//		
//	{
//		printf("%d ", *p);
//		p++;
//	}
//	return 0;
//}



//int main()
//{
//	int arr[10] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
//	printf("%d\n", arr[9] - arr[0]);//指针-指针为指针之间元素的个数的 9  如果是[0]-[9]就是-9
//	return 0;
//}

//int my_strlen(char* str)
//{
//	char* start = str;
//		char* end = str;
//		while (*end != '\0')
//		{
//			end++;
//		}
//		return end - start;
//}
//int main()
//{
//	//strlen -求字符串长度
//	//递归- 模拟实现了strlen -计数器的方式1，递归的方式2
//	//
//	char arr[] = "bit";
//	int len = my_strlen(arr);
//	printf("%d\n", len);
//	return 0;
//}



//int main()
//{
//	int arr[10];
//	printf("%p\n", arr);//地址-首元素的地址
//	printf("%p\n", arr + 1);
//
//	printf("%p\n", &arr[0]);
//	printf("%p\n", &arr[0]+1);
//
//	printf("%p\n", &arr);//
//	printf("%p\n", &arr+1);
//
//	//1.&arr -&数组名-数组名不是首元素地址，数组名表示整个数字-&数组名 取出的是整个数组的地址
//	//2.siezeof(arr)- sizeof(数组名）-数组明表示整个数组-sizeof（数组名）计算的整个数组的大小单位是字节
//	return 0;
//}



int main()
{
	int a = 10;
	int* pa=&a;
	int* * ppa = &pa;//ppa就是二级指针



	return 0;
}
