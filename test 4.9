//int main()
//{
//	int a = 0;//4个字节，32个bit位
//	int b = ~a;//b是有符号的整型,
//	//~--按（2进制）位取反
//	//00000000000000000000000000000000
//	//11111111111111111111111111111111
//	//原码、反码、补码
//	//负数在内存中存储的时候，存储的是二进制的补码
//	//11111111111111111111111111111111 前面有1是负数，补码
// 	//11111111111111111111111111111110 转化成反码
//	//10000000000000000000000000000001 转化成原码，前面1不动（表示符号），其他位取反
//	printf("%d\n", b); //使用的，打印的是这个数的原码
//	return 0;
//}

//int main()
//{
//	int a = 10;
//	//int b = a++;//后置++,先使用，后++
//	int c = a--;//后置--,先使用，后--
//	//printf("a= %d  b=%d\n", a, b);// 11 10
//	printf("a= %d  c=%d\n", a, c);//  9 10
//	return 0;
//
//   }


//}int main()
//{
//	int a = 10;
//	//int b = ++a;//前置++，先++，再使用
//	int c = --a; //前置-- ,先--,后使用
//	//printf("a= %d  b=%d\n", a, b);// 11 11
//	printf("a= %d  c=%d\n", a, c);//  9 9
//
//	return 0;
//
//}
//
//int main()
//{
//	int a = (int)3.14;//double -- int
//	return 0;
//}

int Add(int x, int y)
{ 
	int z = 0;
    z = x + y;
    return z;
}
int main()
{
	//int arr[10] = { 0 };
	//arr[4];//[] -下标引用操作符
	int a = 10;
	int b = 20;
	int sum = Add(a, b);//()--函数调用操作符
	printf("sum= %d\n", sum);

	return 0;

}
