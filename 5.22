#define _CRT_SECURE_NO_WARNINGS 1


#include <stdio.h>
#include <string.h>

//int main()
//{   
//	//创建一个数组-存放整形-10个
//	//
//	int arr[10] = {1,2,3};//不完全初始化，剩下的元素默认初始化为0
//	char arr2[5] = { 'a', 'b' };
//	char arr3[5] = "ab";//ok 不过注意ab后面还有一个/0
//	char arr4[] = "abcdef";
//	printf("%d\n", sizeof(arr4));//
//	//sizeof 计算 arr4所占空间的大小
//	//7个元素-char 7*1 = 7
//
//	printf("%d\n", strlen(arr4));//
//	//strlen 求字符串的长度-'\0'之前的字符个数
//	//[a b c d e f \0]
//	//6
//	//int n = 5;
//	//char ch[n];//error
//
//
//	return 0;
//}

  
//int main()
//{
//
//    char arr1[] = "abc";
//    char arr2[] = { 'a', 'b', 'c' };
//	printf("%d\n", sizeof(arr1));//4
//	printf("%d\n", sizeof(arr2));//3
//	printf("%d\n", strlen(arr1));//3
//	printf("%d\n", strlen(arr2));//随机值
//
//	return 0;
//}


//int main()
//{
//	char arr[] = "abcdef";//[a][b][c][d][e][f][\0]
//	printf("%c\n",arr[3]);//%c-打印字符
//	int i = 0;
//	for (i = 0; i < 6; i++)
//	{
//		printf("%c", arr[i]);   //用循环打印abcdef
//	}
//
//
//	return 0;
//}

//int main()
//{   
//	int arr[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 };
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	int i = 0;
//	for (i = 0; i < sz; i++)
//	{
//		printf("%d ", arr[i]);
//	}
//	return 0;
//}
//


//int main()
//{
//	int arr[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 0 };
//	int sz = sizeof(arr) / sizeof(arr[0]);
//	int i = 0;
//	for (i = 0; i < sz; i++)
//	{
//		printf("arr[%d]= %p\n", i, &arr[i]);//%p-打印地址 
//	}
//	return 0;
//}


//int main()
//{
//	int arr[][4] = { { 1, 2 }, { 3, 4 } };
//	return 0;
//}


//int main()
//{
//	int arr[3][4] = { { 1, 2, 3 },{ 4, 5 } };
//	//1 2 3 0
//	//4 5 0 0
//	//0 0 0 0
//	
//	int i = 0;
//	for (i = 0; i < 3;i++)
//	{
//		int j = 0;
//		for (j = 0; j < 4; j++)
//		{
//			printf("%d ", arr[i][j]);
//		} 
//		printf("\n");
//	}
//	return 0;
//}





//int main()
//{
//	int arr[3][4] = { { 1, 2, 3 }, { 4, 5 } };
//	//1 2 3 0
//	//4 5 0 0
//	//0 0 0 0
//
//	int i = 0;
//	for (i = 0; i < 3; i++)
//	{
//		int j = 0;
//		for (j = 0; j < 4; j++)
//		{
//			printf("%d ", arr[i][j]);
//		}
//		printf("\n");
//	}
//	return 0;
//}


//冒泡排序函数
bubble_sort(int arr[], int sz)
{
	//确定冒泡排序的函数
	int i = 0;
	for (i = 0; i < sz - 1; i++)
	{   
		int flag = 1;//假设这一趟要排序的数据已经有序
		//每一趟冒泡排序
		int j = 0;
		for (j = 0; j < sz -1- i; j++)
		{
			if (arr[j] > arr[j + 1])
			{
				int tmp = arr[j];
				arr[j] = arr[j + 1];
				arr[j + 1] = tmp;
				flag = 0;//本趟排序的数据其实不完全有序
			}
		}
		if (flag == 1)
		{
			break;
		}
	}
}
int main()
{
	int arr[] = {9,8,7,6,5,4,3,2,1,0};
	int i = 0;
	int sz = sizeof(arr) / sizeof(arr[0]);
	//对arr进行排序，排成升序
	//arr是数组，我们对数组arr进行传参，实际传递过去的是数组arr首元素的地址 &arr[0]
	bubble_sort(arr, sz);//冒泡排序函数
	for (i = 0; i < sz; i++)
	{
		printf("%d ", arr[i]);
	}
	return 0;
}
